#include <Arduino.h>

#include "Wire.h" // This library allows you to communicate with I2C devices.
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ESP8266WebServer.h>
#include <DNSServer.h>
#include <WiFiManager.h>

//#define WIFI_SSID "PG6WLAN"
//#define WIFI_PASS "Turbolader24$$"

#define WIFI_SSID "moto g(6) 5401"
#define WIFI_PASS "the1and0nli"

#define MPU_ADDR 0x67// I2C address of the MPU-6050. If AD0 pin is set to HIGH, the I2C address will be 0x69.

int schwelle = 800;
int accTime = 0;
int accDelay = 20;
int danebenTime = 0;

int requestTime = 0;
int requestDelay = 3000;

int time_daneben = 0;

int16_t accelerometer_x, accelerometer_y, accelerometer_z; // variables for accelerometer raw data
int16_t accelerometer_x_old, accelerometer_y_old, accelerometer_z_old;
int16_t gyro_x, gyro_y, gyro_z; // variables for gyro raw data
int16_t temperature; // variables for temperature data

char tmp_str[7]; // temporary variable used in convert function

char* convert_int16_to_str(int16_t i) { // converts int16 to string. Moreover, resulting strings will have the same length in the debug monitor.
  sprintf(tmp_str, "%6d", i);
  return tmp_str;
}

void setup() {
  Serial.begin(9600);
  //Begin I2C
  Wire.begin();
  Wire.beginTransmission(MPU_ADDR); // Begins a transmission to the I2C slave (GY-521 board)
  Wire.write(0x6B); // PWR_MGMT_1 register
  Wire.write(0); // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);
  Serial.println();
  Serial.println();
  // Begin WiFi
  WiFi.begin(WIFI_SSID, WIFI_PASS);
 
  // Connecting to WiFi...
  Serial.print("Connecting to ");
  Serial.print(WIFI_SSID);
  // Loop continuously while WiFi is not connected
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(100);
    Serial.print(".");
  }
 
  // Connected to WiFi
  Serial.println();
  Serial.print("Connected! IP address: ");
  Serial.println(WiFi.localIP());
}
void loop() {
  if(millis()-accTime > accDelay) {
    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x3B); // starting with register 0x3B (ACCEL_XOUT_H) [MPU-6000 and MPU-6050 Register Map and Descriptions Revision 4.2, p.40]
    Wire.endTransmission(false); // the parameter indicates that the Arduino will send a restart. As a result, the connection is kept active.
    Wire.requestFrom(MPU_ADDR, 7*2, true); // request a total of 7*2=14 registers
    
    // "Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same variable
    accelerometer_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
    accelerometer_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
    accelerometer_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)
    temperature = Wire.read()<<8 | Wire.read(); // reading registers: 0x41 (TEMP_OUT_H) and 0x42 (TEMP_OUT_L)
    gyro_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x43 (GYRO_XOUT_H) and 0x44 (GYRO_XOUT_L)
    gyro_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x45 (GYRO_YOUT_H) and 0x46 (GYRO_YOUT_L)
    gyro_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x47 (GYRO_ZOUT_H) and 0x48 (GYRO_ZOUT_L)
    if(abs(accelerometer_x-accelerometer_x_old)>3500) {
      if(millis()-time_daneben>1000) {
        Serial.println("ScheiÃŸe daneben");
      }
      time_daneben = millis();
    }
    // print out data
    Serial.print("  aX = "); 
    Serial.print(convert_int16_to_str(accelerometer_x));
    Serial.print("  aY = "); 
    Serial.print(convert_int16_to_str(accelerometer_y));
    Serial.print("  aZ = "); 
    Serial.println(convert_int16_to_str(accelerometer_z));

    // if(abs(accelerometer_x-accelerometer_x_old)+abs(accelerometer_y-accelerometer_y_old)+abs(accelerometer_z-accelerometer_z_old) > schwelle) {
    //  if(millis()-danebenTime > 100)
    //  {
    //    Serial.println("Daneben");
    //  } 
    //   danebenTime = millis();
    // }

    accelerometer_x_old = accelerometer_x;
    accelerometer_y_old = accelerometer_y;
    accelerometer_z_old = accelerometer_z;
    /*// the following equation was taken from the documentation [MPU-6000/MPU-6050 Register Map and Description, p.30]
    Serial.print(" | tmp = "); Serial.print(temperature/340.00+36.53);
    Serial.print(" | gX = "); Serial.print(convert_int16_to_str(gyro_x));
    Serial.print(" | gY = "); Serial.print(convert_int16_to_str(gyro_y));
    Serial.print(" | gZ = "); Serial.print(convert_int16_to_str(gyro_z));
    Serial.println();
    */
   accTime = millis();
  }
  // if (millis()-requestTime > requestDelay) {
  //   if (WiFi.status() == WL_CONNECTED) { //Check WiFi connection status
  //   HTTPClient http;    //Declare object of class HTTPClient
  //   //GET Data
  //   //char *getData = "?accX=" + String(accelerometer_x) + "&accY=" + String(accelerometer_y) + "&accZ=" + String(accelerometer_z) + "\n" ;  //Note "?" added at front
  //   String accX = String(accelerometer_x);
  //   String accY = String(accelerometer_y);
  //   String accZ = String(accelerometer_z);
  //   String Link = "http://192.168.43.237:80/home.html?accX="+accX+"&accY="+accY+"&accZ="+accZ;
  //   //String Link = "http://www.google.com";
  //   Serial.println(Link);
  //   http.begin(Link);     //Specify request destination
    
  //   int httpCode = http.GET();            //Send the request
  //   //String payload = http.getString();    //Get the response payload

  //   Serial.println(httpCode);   //Print HTTP return code
  //   //Serial.println(payload);    //Print request response payload

  //   http.end();  //Close connection
  // }
  // requestTime = millis();
  // }
}
